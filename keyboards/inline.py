from collections.abc import Sequence

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.models import Category


class MenuCallback(CallbackData, prefix='menu'):
    level: int
    menu_name: str | None = None
    category: int | None = None
    page: int = 1
    product_id: int | None = None


empty_cart_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥', callback_data=MenuCallback(level=0, menu_name='–ì–ª–∞–≤–Ω–∞—è').pack()
            )
        ]
    ]
)

main_menu_kb = (
    InlineKeyboardBuilder(
        [
            [
                InlineKeyboardButton(
                    text='–¢–æ–≤–∞—Ä—ã üçï',
                    callback_data=MenuCallback(level=1, menu_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏').pack(),
                ),
                InlineKeyboardButton(
                    text='–ö–æ—Ä–∑–∏–Ω–∞ üõí',
                    callback_data=MenuCallback(level=3, menu_name='–ö–æ—Ä–∑–∏–Ω–∞').pack(),
                ),
                InlineKeyboardButton(
                    text='–û –Ω–∞—Å ‚ÑπÔ∏è', callback_data=MenuCallback(level=0, menu_name='–û –Ω–∞—Å').pack()
                ),
                InlineKeyboardButton(
                    text='–û–ø–ª–∞—Ç–∞ üí≥', callback_data=MenuCallback(level=0, menu_name='–û–ø–ª–∞—Ç–∞').pack()
                ),
                InlineKeyboardButton(
                    text='–î–æ—Å—Ç–∞–≤–∫–∞ üöó',
                    callback_data=MenuCallback(level=0, menu_name='–î–æ—Å—Ç–∞–≤–∫–∞').pack(),
                ),
            ]
        ]
    )
    .adjust(2)
    .as_markup()
)


def get_user_catalog_btns(
    *, level: int, categories: Sequence[Category], adjust_values: tuple[int, ...] = (2,)
):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥', callback_data=MenuCallback(level=level - 1, menu_name='–ì–ª–∞–≤–Ω–∞—è').pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text='–ö–æ—Ä–∑–∏–Ω–∞ üõí', callback_data=MenuCallback(level=3, menu_name='–ö–æ—Ä–∑–∏–Ω–∞').pack()
        )
    )

    for cat in categories:
        keyboard.add(
            InlineKeyboardButton(
                text=cat.name,
                callback_data=MenuCallback(
                    level=level + 1, menu_name=cat.name, category=cat.id
                ).pack(),
            )
        )
    return keyboard.adjust(*adjust_values).as_markup()


def get_products_btns(
    *,
    level: int,
    category: int,
    page: int,
    pagination_btns: dict,
    product_id: int,
    adjust_values: tuple[int, ...] = (2, 1),
):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥', callback_data=MenuCallback(level=level - 1, menu_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏').pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text='–ö–æ—Ä–∑–∏–Ω–∞ üõí', callback_data=MenuCallback(level=3, menu_name='–ö–æ—Ä–∑–∏–Ω–∞').pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text='–ö—É–ø–∏—Ç—å üí∏',
            callback_data=MenuCallback(
                level=level, menu_name='–í –∫–æ—Ä–∑–∏–Ω—É', product_id=product_id, category=category
            ).pack(),
        )
    )
    keyboard.adjust(*adjust_values)

    row = []
    for text, menu_name in pagination_btns.items():
        row.append(
            InlineKeyboardButton(
                text=text,
                callback_data=MenuCallback(
                    level=level,
                    menu_name=menu_name,
                    category=category,
                    page=page + 1 if menu_name == 'next' else page - 1,
                ).pack(),
            )
        )

    return keyboard.row(*row).as_markup()


def get_cart_buttons(*, level, page, pagination_btns, product_id, quantity):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text='-1',
            callback_data=MenuCallback(
                level=level, menu_name='decrease', product_id=product_id, page=page
            ).pack(),
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text='+1',
            callback_data=MenuCallback(
                level=level, menu_name='–í –∫–æ—Ä–∑–∏–Ω—É', product_id=product_id, page=page
            ).pack(),
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text='–£–¥–∞–ª–∏—Ç—å',
            callback_data=MenuCallback(
                level=level, menu_name='delete', product_id=product_id, page=page
            ).pack(),
        )
    )
    row = []
    for text, menu_name in pagination_btns.items():
        row.append(
            InlineKeyboardButton(
                text=text,
                callback_data=MenuCallback(
                    level=level,
                    menu_name=menu_name,
                    page=page + 1 if menu_name == 'next' else page - 1,
                ).pack(),
            )
        )
    keyboard = keyboard.row(*row)
    keyboard.row(
        InlineKeyboardButton(
            text='–ù–∞–∑–∞–¥', callback_data=MenuCallback(level=1, menu_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏').pack()
        )
    )
    return keyboard.as_markup()


def get_inline_kbd(*, buttons: dict[str, str], adjust_values: tuple[int, ...] = (2,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in buttons.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*adjust_values).as_markup()
